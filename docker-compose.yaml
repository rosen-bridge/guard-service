version: '3.8'

services:
  db:
    image: postgres:13
    container_name: postgres
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - rosen_network
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER']
      interval: 10s
      timeout: 5s
      retries: 3

  guard-service:
    image: ghcr.io/rosen-bridge/guard-service:${IMAGE_VERSION:-latest}
    container_name: guard-service
    ports:
      - 127.0.0.1:${GUARD_PORT:-8080}:8080
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./config/local.yaml
        target: /app/config/local.yml
      - type: bind
        source: ./config/thresholds.json
        target: /app/config/thresholds.json
      - ./logs/guard-logs/:/app/logs/
      - guard-data:/app/peer-dialer/
      - ./logs/tss-api-logs/:/app/tss-api/logs/
      - tss-api-data:/app/tss-api/home/
    networks:
      - rosen_network
    restart: always
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl --fail http://localhost:8080/swagger || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres-data:
  guard-data:
  tss-api-data:

networks:
  rosen_network:
